@use 'sass:math';
@use 'sass:map';
@use 'sass:list';

@function computeGridColumn($columnCount, $outerGutter: true) {
  @return calc(
    (var(--vw) - (#{$columnCount - 1} * var(--grid-gutter)) - (#{if($outerGutter, 2, 0)} * var(--grid-margin))) / #{$columnCount}
  );
}

@function computeGrid($columns, $additionalGutters: 0, $margin: 0) {
  $gutters: max(0, math.ceil($columns) - 1) + $additionalGutters;
  @return ($columns, $gutters, $margin);
}

@function computeGridCalc($computed) {
  $columns: list.nth($computed, 1);
  $gutters: list.nth($computed, 2);
  $margin: list.nth($computed, 3);

  @if $columns == 0 and $margin == 0 and $gutters > 0 {
    @return calc(var(--grid-gutter) * #{$gutters});
  }

  @if $columns == 1 and $gutters == 0 and $margin == 0 {
    @return var(--grid-column);
  }

  @if ($margin == 0) {
    @return calc((var(--grid-column) * #{$columns}) + (var(--grid-gutter) * #{$gutters}));
  } @else {
    @return calc((var(--grid-column) * #{$columns}) + (var(--grid-gutter) * #{$gutters}) + (var(--grid-margin) * #{$margin}));
  }
}

@function grid($columns, $additionalGutters: 0, $margin: 0) {
  @return computeGridCalc(computeGrid($columns, $additionalGutters, $margin));
}
